snippet cmake
cmake_minimum_required(VERSION 3.25)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

project($1 VERSION 1.0)
add_executable(${PROJECT_NAME} main.cpp)
endsnippet

snippet lib
target_include_directories(${EXENAME} PRIVATE ${PROJECT_SOURCE_DIR}/src/lib)
target_link_directories(${EXENAME} PRIVATE ${PROJECT_BINARY_DIR}/src/lib)
target_link_libraries(${EXENAME} $1)
endsnippet

snippet submod
find_package(Git QUIET)
if(GIT_FOUND)
    option(UPDATE_SUBMODULES "Check submodules during build" ON)
    if(NOT UPDATE_SUBMODULES)
        return()
    endif()
    execute_process(COMMAND ${GIT_EXECUTABLE} submodule
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    OUTPUT_VARIABLE EXISTING_SUBMODULES
                    RESULT_VARIABLE RETURN_CODE
                    OUTPUT_STRIP_TRAILING_WHITESPACE)
    message(STATUS "Updating git submodules:\n${EXISTING_SUBMODULES}")
    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    RESULT_VARIABLE RETURN_CODE)
    if(NOT RETURN_CODE EQUAL "0")
        message(WARNING "Cannot update submodules. Git command failed with ${RETURN_CODE}")
        return()
    endif()
    message(STATUS "Git submodules updated successfully")
endif()
endsnippet

snippet test
# BUILD_TESTING variable is created by include(CTest)
# It is set to ON by default
if (BUILD_TESTING)
    get_filename_component(CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
    set(test_name "test_${CURRENT_DIR_NAME}")
    add_executable(${test_name} ${PROJECT_SOURCE_DIR}/src/${CURRENT_DIR_NAME}/problem.cpp test.cpp)
    target_link_libraries(${test_name} PRIVATE GTest::gtest_main)

    include(GoogleTest)
    # Finds all the Google tests associated with the executable
    gtest_discover_tests(${test_name})
endif()
endsnippet

snippet addsub
file(
  GLOB SUBDIRS
  RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}
  *)
foreach(SUBDIR ${SUBDIRS})
  if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${SUBDIR})
    add_subdirectory(${SUBDIR})
  endif()
endforeach()
endsnippet

snippet qtcmake
cmake_minimum_required(VERSION 3.27)
project($1)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)

set(CMAKE_PREFIX_PATH "/opt/homebrew/Cellar/qt/6.6.2_1")

find_package(
  Qt6
  COMPONENTS Core Gui Widgets
  REQUIRED)

add_executable($1 main.cpp)
target_link_libraries($1 Qt::Core Qt::Gui Qt::Widgets)
endsnippet
